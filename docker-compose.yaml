services:

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/postgresql.conf:/var/lib/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/var/lib/postgresql/postgresql.conf"]
    environment:
      POSTGRES_USER: dockeruser
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: medianalytics
    networks:
      - backend-network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dockeruser -d medianalytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  back-api:
    build:
      context: ./Back-api
      dockerfile: Dockerfile
    volumes:
      - ./Back-api:/app
      - ./config:/app/config
    ports:
      - "8080:8080"
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  front:
    build:
      context: ./Front
      dockerfile: Dockerfile
    volumes:
      - ./Front:/app
      - front_node_modules:/app/node_modules
    ports:
      - "4200:4200"
    networks:
      - backend-network
    restart: unless-stopped

  back-data:
    build:
      context: ./Back-data
      dockerfile: Dockerfile
    volumes:
      - ./Back-data:/app
      - ./config:/app/config
    ports:
      - "3000:3000"
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  back-ai:
    build:
      context: ./Back-ai
      dockerfile: Dockerfile
    volumes:
      - ./Back-ai:/app
      - ./config/sentiments_ideologies_enums.py:/app/config/sentiments_ideologies_enums.py
    ports:
      - "9000:9000"
    networks:
      - backend-network
    restart: unless-stopped

networks:
  backend-network:
    driver: bridge

volumes:
  db-data:
  front_node_modules:

secrets:
  db-password:
    file: db/password.txt
